[gcode_macro SQUIGGLY_PURGE]
gcode:
    # Mathematical constants
    {% set TAU = 6.28318 %}
    {% set PI = 3.14159 %}
    {% set FACTORIALS = [1, 2, 24, 720, 40320, 3628800, 479001600, 87178291200, 20922789888000] %}
    
    # Base macro parameters
    {% set prime_line_steps = params.STEPS|default(16)|int %}
    {% set prime_line_periods = params.PERIODS|default(10)|int %}
    {% set prime_line_amplitude = params.AMPLITUDE|default(5.0)|float %}
    {% set prime_line_period_length = params.PERIOD_LENGTH|default(5.0)|float %}
    {% set prime_line_purge_distance = params.PURGE_LENGTH|default(100.0)|float %}
    {% set prime_line_flowrate = params.FLOWRATE|default(10.0)|float %}
    {% set prime_line_height = params.LINE_HEIGHT|default(0.6)|float %}
    {% set prime_line_unretract_length = params.UNRETRACT_LENGTH|default(5.0)|float %}
    {% set prime_line_direction = params.LINE_DIRECTION|default("X")|string|upper %}
    {% set prime_line_margin = params.LINE_MARGIN|default(10.0)|float %} # Used only in adaptive mode
    {% set prime_line_adaptive = params.ADAPTIVE_MODE|default(1)|int %}
    {% set verbose = params.VERBOSE|default(1)|int %}

    # If the SIZE parameter is defined and not a dummy placeholder, we use it to do the adaptive bed mesh logic
    {% set coordinates_found = False %}
    {% if params.SIZE is defined and params.SIZE != "0_0_0_0" %}
        {% set xMinSpec, yMinSpec, xMaxSpec, yMaxSpec = params.SIZE.split('_')|map('trim')|map('int') %}
        {% set coordinates_found = True %}
    {% elif printer.exclude_object is defined %}
        {% if printer.exclude_object.objects %}
            # Else if SIZE is not defined, we fallback to use the [exclude_object] tags
            # This method is derived from Kyleisah KAMP repository: https://github.com/kyleisah/Klipper-Adaptive-Meshing-Purging)
            {% set eo_points = printer.exclude_object.objects|map(attribute='polygon')|sum(start=[]) %}
            {% set xMinSpec = eo_points|map(attribute=0)|min %}
            {% set yMinSpec = eo_points|map(attribute=1)|min %}
            {% set xMaxSpec = eo_points|map(attribute=0)|max %}
            {% set yMaxSpec = eo_points|map(attribute=1)|max %}
            {% set coordinates_found = True %}
        {% endif %}
    {% endif %}

    # We get the default prime line position parameters
    {% set prime_line_x = params.START_X|default(5.0)|float %}
    {% set prime_line_y = params.START_Y|default(3.5)|float %}
    {% set center_x, center_y = [printer.toolhead.axis_maximum.x / 2, printer.toolhead.axis_maximum.y / 2]|map("float") %}

    # Account for the amplitude (height) of the purge line
    {% if prime_line_direction == "X" %}
        {% set offset_x, offset_y = 0, prime_line_amplitude/2 %}
    {% else %}
        {% set offset_x, offset_y = prime_line_amplitude/2, 0 %}
    {% endif %}

    # If first layer coordinates are retrieved and adaptive mode is enabled, then we replace the coordinates to
    # do an adaptive purge while being careful to have the line stay on the bed when the first layer
    # is in an opposite bed quadrant than the prime line initial coordinates (due to mirrored coordinates from center axes)...
    {% if coordinates_found and prime_line_adaptive == 1 %}
        {% set prime_line_x = 2*center_x - prime_line_x if (prime_line_x > center_x and xMaxSpec < center_x) or (prime_line_x < center_x and xMinSpec > center_x) 
                               else prime_line_x %}
        {% set prime_line_y = 2*center_y - prime_line_y if (prime_line_y > center_y and yMaxSpec < center_y) or (prime_line_y < center_y and yMinSpec > center_y) 
                               else prime_line_y %}
        {% set prime_line_x = [[prime_line_x, xMinSpec - prime_line_margin - offset_x]|max, xMaxSpec + prime_line_margin + offset_x]|min %}
        {% set prime_line_y = [[prime_line_y, yMinSpec - prime_line_margin - offset_y]|max, yMaxSpec + prime_line_margin + offset_y]|min %}
    {% endif %}

    # Choose the way of printing the primeline (in + or -) alongside the direction to avoid going outside the bed boundaries
    {% set prime_line_way = -1 if (prime_line_direction == "X" and prime_line_x > center_x) or (prime_line_direction == "Y" and prime_line_y > center_y) else 1 %}

    # Calculate steps
    {% set steps = [] %}
    {% set state = namespace(cur_y=prime_line_y, prime_line_length=0.0, cos=0.0) %}

    {% for step in range(1, prime_line_periods * prime_line_steps + 1) %}
        {% set sign = cycler(1.0, -1.0) %}
        {% set state.cos = 0.0 %}
        {% set rad_angle = step / prime_line_steps * TAU %}
        {% for i in range(0, FACTORIALS|length) %}
            {% set cos_step = sign.next() * ((rad_angle%TAU)**(2*i) / FACTORIALS[i]) %}
            {% set state.cos = state.cos + cos_step %}
        {% endfor %}
        {% set dist_x = step * prime_line_period_length / prime_line_steps %}
        {% set dist_y = prime_line_amplitude * (0.5 - (0.5 * state.cos)) %}
        {% set rel_x = prime_line_period_length/prime_line_steps %}
        {% set rel_y = prime_line_y + dist_y - state.cur_y %}
        {% set e_length = (rel_x**2 + rel_y**2)**0.5 %}
        {% set state.cur_y = state.cur_y + rel_y %}
        {% set state.prime_line_length = state.prime_line_length + e_length %}
        {% set _ = steps.append((rel_x, rel_y, e_length)) %}
    {% endfor %}
    
    {% set max_extrude_cross_section = printer["configfile"].config["extruder"]["max_extrude_cross_section"]|float %}
    {% set filament_diameter = printer["configfile"].config["extruder"]["filament_diameter"]|float %}
    {% set filament_area = PI * (filament_diameter / 2)**2 %}
    
    # We first compute the width of the prime line
    {% set purge_volume = prime_line_purge_distance * filament_area %}
    {% set line_width = purge_volume / (prime_line_height * state.prime_line_length) %}

    # Then we check that the prime line cross section will not be problematic (exceeding Klipper max_extrude_cross_section)
    # or, if it's the case, we warn the user and add a correction to the length of filament to be purged
    {% if (prime_line_height * line_width) > max_extrude_cross_section %}
        {% if verbose %}
            {action_respond_info("The prime_line_purge_distance of %.4f mm is too high and will exceed the max_extrude_cross_section!" % prime_line_purge_distance)}
        {% endif %}
        {% set prime_line_purge_distance = 0.98 * (max_extrude_cross_section * state.prime_line_length) / filament_area %}
        {% set purge_volume = prime_line_purge_distance * filament_area %}
        {% set line_width = purge_volume / (prime_line_height * state.prime_line_length) %}
        {% if verbose %}
            {action_respond_info("Corrected the prime_line_purge_distance to %.4f mm" % prime_line_purge_distance)}
        {% endif %}
    {% endif %}

    # We then compute the height to width ratio and validate that the prime line will not be too thin
    {% if (prime_line_height / line_width) >= 0.5 %} # TODO: validate this 1/2 ratio is good for all
        {action_raise_error("The prime line will be too thin %.4f x %.4f and will probably not stick properly to the bed. Increase its purge distance or decrease its length!" % (prime_line_height, line_width))}
    {% endif %}

    # Finally we compute the speed to get the correct flowrate for the prime line
    {% set speed = (prime_line_flowrate / (prime_line_height * line_width)) * 60 |float %}

    G91
    M83
    {% if (printer.toolhead.position.z < 5) %}
        G1 Z5 F600
    {% endif %}

    # Starting position
    G90
    G0 X{prime_line_x} Y{prime_line_y} F18000

    # Add some extra squish to the prime line 
    G1 Z{prime_line_height*0.8} F600

    # Add pressure in the nozzle
    G92 E0
    G1 E{prime_line_unretract_length} F300

    # Prime line
    G92 E0
    G91
    {% if prime_line_direction == "X" %}
        {% for x,y,e in steps %}
            G1 X{x*prime_line_way} Y{y} E{e/state.prime_line_length*prime_line_purge_distance} F{speed}
        {% endfor %}
    {% elif prime_line_direction == "Y" %}
        {% for y,x,e in steps %}
            G1 X{x} Y{y*prime_line_way} E{e/state.prime_line_length*prime_line_purge_distance} F{speed}
        {% endfor %}
    {% else %}
        { action_respond_error("Prime line direction is not valid. Choose either X or Y in the variables.cfg file!") }
    {% endif %}
    G90
    
    # Retract and Z-hop
    G92 E0
    G1 E-0.2 F2100
    G92 E0
    G1 Z3 F600

    # Additional small movement to get out of the line as some slicers directly emmit
    # a Z- move as a first step that make the toolhead crash back in the line and get dirty
    G91
    G1 X5 Y5 F18000
    G90
    
    # Flushing Klipper's buffer to ensure the primeline sequence is done before continuing
    M400